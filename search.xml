<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C语言教学-part2</title>
      <link href="/c-yu-yan-jiao-xue-part2/"/>
      <url>/c-yu-yan-jiao-xue-part2/</url>
      
        <content type="html"><![CDATA[<h2 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h2><p>格式占位符(%)是在C/C++语言中格式输入函数，如<code>scanf()</code>、<code>printf()</code>等函数中使用。其意义就是起到格式占位的意思，表示在该位置有输入或者输出。</p><p>以下为C语言中各占位符介绍。</p><p><img src="20210609-C%E8%AF%AD%E8%A8%80%E6%95%99%E5%AD%A6-part2/%E5%8D%A0%E4%BD%8D%E7%AC%A6%E8%A1%A8.jpg" alt="image-20201116195930505"></p><p>其最常见的用法即用在格式化输入输出函数中，即<code>scanf()</code>与<code>printf()</code>。</p><p>以<code>printf()</code>函数为例，其使用方式为<code>int printf( const char *restrict format, ... );</code>。其中：</p><p>​    <code>const char *restrict format</code>意为该处需填入一个仅能通过指针引用的格式化字符常量，对新人来说只需知道此处应填入一个“输出模板”即可，即最终的输出形式；</p><p>​    <code>...</code>为将要输入/输出至占位符位置的值，多个值之间以逗号<code>,</code>分隔。</p><p><em>补充：需注意的是，不仅输出函数会将输出按照<code>format</code>参数格式化，输入函数同样也会如此执行。换句话说，用户在输入时也必须严格按照<code>format</code>格式进行输入，否则将不能正常输入。具体参考下面使用示例。</em></p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>源码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d , "</span> <span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d , a+1=%d"</span> <span class="token punctuation">,</span> a <span class="token punctuation">,</span> a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><p><code> a=1  , a=1 , a+1 = 2</code></p><p>源码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"a=%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>错误输入示例：</p><p><code>1</code></p><p>如此输入将导致变量a无法被正确赋值；</p><p>正确输入示例</p><p><code>a=1</code></p><p>如此输入后<code>a</code>的值将置为<code>1</code>。</p><h2 id="运算符、表达式、语句"><a href="#运算符、表达式、语句" class="headerlink" title="运算符、表达式、语句"></a>运算符、表达式、语句</h2><h3 id="基本运算符"><a href="#基本运算符" class="headerlink" title="基本运算符"></a>基本运算符</h3><p>包括赋值、算数、位、逻辑<del>和逗号运算符</del>等；</p><p>​    赋值运算符，即<code>=</code>，其作用为将右侧侧的值写入左侧，需注意的其左侧必须能被修改，不能为常量；</p><p>​    算数运算符，即<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>等，数量太多，此处暂不一一列举。此类运算符都具有数学意义，一般用于数值间的数学运算。因其意义多与数学公式中的运算符相同，此类运算符对一般来讲直接凭直觉使用即可，有需要的同学可以自行上网查询相关资料；</p><p>​    位运算符，即<code>&lt;&lt;</code>、<code>&gt;&gt;</code>、<code>&amp;</code>、<code>|</code>、<code>~</code>、<code>^</code>，此运算符涉及位运算，新人一般不会用到。前两个作用是按照指示方向将当前数值的二进制码左移或右移一位，超出范围的部分舍弃、缺失的部分用0补齐，后四个运算符分别为按位进行与、或、非、异或运算。</p><p>​    逻辑运算符，即<code>&amp;&amp;</code>、<code>||</code>、<code>!</code>，三个运算符分别对应与、或、非运算。</p><p><em>补充：对于上面的位运算与逻辑运算的运算方式，算是布尔代数的基本内容，需要了解的同学可以自行上网搜索布尔代数，此处暂不展开篇幅做解释；</em></p><p><em>逗号运算符较为特殊，其一般用于几个基本语句与函数的参数表内分隔多个参数。但由于逗号运算符的运算逻辑与优先级太过于奇怪，我们几乎一辈子都不会在参数列表外使用逗号运算符，即使在参数列表中，我们也习惯于将其用法看作是固定的语法要求，而不是去理解参数列表中逗号运算符的运算逻辑。以至于甚至某些教材都忘了还有这么一个运算符存在…</em></p><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><p>较容易理解：表达式由运算符与对象组成。且<strong>每个表达式都有一个值。</strong></p><p>例如这就是一个表达式：<code>-4+6</code>，其值为2。</p><p>对于较长的表达式，我们就需要注意运算符的优先级问题。最直观的例子就是<code>1+2*3</code>，我们在小学就学过，应该先算乘除，后算加减，所以这个表达式的结果为6而非9。同样如小学学过，算式中有括号就先算括号里的，那么表达式<code>(1+2)*3</code>的结果即为9而非6。</p><p>而对于括号的嵌套问题，C语言向数学运算中一样有小括号、中括号、大括号的区分，统一使用小括号。例如表达式<code>(2+(3+4)*5)*6</code>的值即为222。</p><p>当然，不止算术运算符存在优先级的问题，其他运算符同样具有不同的优先级，使用时需注意。</p><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><p>语句为C语言的基本构建块，一条语句相当于一条完整的计算机指令，每个语句以分号结尾。</p><p>语句可以是表达式，如：</p><p><code>GuaKe = true;</code></p><p>可以是一个值，如：</p><p><code>666;</code></p><p>甚至可以是“空语句”：</p><p><code>;</code></p><p><strong>需要注意的是，分号为一条语句结尾的唯一标识，例如以下代码也只是一条语句：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a <span class="token punctuation">,</span> b <span class="token punctuation">,</span> c <span class="token punctuation">,</span> d <span class="token punctuation">,</span>e <span class="token punctuation">,</span> f <span class="token punctuation">,</span> g <span class="token punctuation">,</span> h <span class="token punctuation">,</span>i <span class="token punctuation">,</span> j <span class="token punctuation">,</span> k <span class="token punctuation">,</span> l<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>由大括号包裹起来的一条或多条甚至零条语句成为一个代码块。代码块中无论包含什么内容在外部看来都算且只算一条语句。</p><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><p>在实际开发中，我们时常需要将一种类型的值转换为另一种类型。其写作格式及样例如下：</p><p><code>(目标类型)源数据</code></p><p><code>int a = (int)1.6;</code></p><p>以上一条语句实现了将1.6这一浮点型数值转换为整型后赋值给整型变量a的操作。</p><p>需注意的是，不同类型间进行强制类型转换的规则会有所不同，如以上语句执行完毕后a的值为1而非2，这是因为浮点型在强制转换为整形后其小数部分是直接去掉而非四舍五入。所以在进行强制类型转换时应特别注意转换规则。</p><p><em>补充：综合已经介绍过的内容，我们是可以实现四舍五入制度的类型转换的。需要用到运算符<code>?:</code>。例如将把浮点类型的变量b经四舍五入转换为整型后赋值给a，实现方式即为<code>int a = (int)(b+0.5)&gt;(int)b?(int)(b+1):(int)b;</code>感兴趣的同学可以自行推到一下这个式子。</em></p><p>*但严格来说该式仍有问题，因浮点型无法精确表示一个有效位数过长的数字。</p>]]></content>
      
      
      <categories>
          
          <category> 琴理工作室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 教程 </tag>
            
            <tag> 琴理工作室 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言教学-Part1</title>
      <link href="/c-yu-yan-jiao-xue-part1/"/>
      <url>/c-yu-yan-jiao-xue-part1/</url>
      
        <content type="html"><![CDATA[<h1 id="前置知识-IDE"><a href="#前置知识-IDE" class="headerlink" title="前置知识:IDE"></a>前置知识:IDE</h1><h2 id="何为IDE"><a href="#何为IDE" class="headerlink" title="何为IDE"></a>何为IDE</h2><p>​                即集成开发环境（IDE，Integrated Development Environment ），包含编辑器、编译器、调试器、图形界面等工具。因一般都包含项目管理，代码高亮，自动补全，代码调试等功能，故使用IDE开发相比直接在文本编辑器中写代码，在终端中使用命令调试、编译能极大提升开发效率。</p><h2 id="C-C-开发常见IDE"><a href="#C-C-开发常见IDE" class="headerlink" title="C/C++开发常见IDE"></a>C/C++开发常见IDE</h2><p>Dev-C++、CLion、VS、VSCode</p><h2 id="IDE推荐"><a href="#IDE推荐" class="headerlink" title="IDE推荐"></a>IDE推荐</h2><p>新人推荐Dev-C++上手，非常轻量化，且安装完不用进行过多配置即可使用，调试功能也能满足日常学习需求；</p><p>熟练后推荐尝试Clion/VSCode，两者安装均相对繁琐但功能强大，且可通过安装插件进一步扩展其功能；</p><p>VS相对更适合专业的C/C++开发人员使用，对于学习来说太过臃肿</p><h1 id="C语言简介"><a href="#C语言简介" class="headerlink" title="C语言简介"></a>C语言简介</h1><h2 id="程序基本结构"><a href="#程序基本结构" class="headerlink" title="程序基本结构"></a>程序基本结构</h2><h3 id="常有头文件"><a href="#常有头文件" class="headerlink" title="常有头文件"></a>常有头文件</h3><p>头文件作为一种包含功能函数、数据接口声明的载体文件，主要用于保存程序的声明，而定义文件用于保存程序的实现。</p><p>通俗来讲：倘若将程序比作汽车，C语言比作原料，则头文件相当于一个文件夹，文件夹中放的是汽车各部件的图纸。</p><p><em>补充：按照这种类比，则定义文件可以理解为代工厂，工厂将原材料按照图纸加工成部件，编程的工作即是把各部件拼成一辆完整的汽车。</em></p><h3 id="常含有宏定义"><a href="#常含有宏定义" class="headerlink" title="常含有宏定义"></a>常含有宏定义</h3><p>宏（Macro），是一种批量处理的称谓。计算机科学里的宏是一种抽象（Abstraction），它根据一系列预定义的规则替换一定的文本模式。</p><p>通俗来讲：即是将一段字符串替换成另一串字符串。例如倘若程序中有<code>#define TEMP 20</code>，则程序中所有的<code>TEMP</code>单词均会被替换成<code>20</code>。</p><p><em>补充：需注意的是，宏定义在替换文本是会无视前后文内容。若定义了</em><code>#define TEMP 20</code>，程序中又写了<code>TEMPLE = "寺庙";</code>，则编译前会被转义为<code>20LE = "寺庙";</code>。</p><h3 id="必含有主函数"><a href="#必含有主函数" class="headerlink" title="必含有主函数"></a>必含有主函数</h3><p>必须包含<code>main()</code>函数为C语言的语法规则，必须遵循。</p><h2 id="基本的程序结构"><a href="#基本的程序结构" class="headerlink" title="基本的程序结构"></a>基本的程序结构</h2><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h3><p>下面是一个最简单的C语言程序：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span><span class="token comment">//引用头文件，内部包含输入输出函数</span></span><span class="token comment">/**  *主函数  */</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//返回值，结束函数</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该代码含有一个头文件和一个主函数以及两种注释。</p><h4 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h4><p>关于头文件是什么已经做过介绍，使用方式即<code>#include &lt;头文件名&gt;</code>或<code>#include ”头文件名“</code>。两种格式的区别在于前者先在标准库中查找，查找不到在path中查找。后者为文件路径，若直接是文件名则在项目根目录下查找。</p><p><em>补充：path为系统环境变量中的属性，其值为一个或多个目录。</em></p><p><a href="https://baike.baidu.com/item/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">环境变量_百度百科 (baidu.com)</a></p><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>注释就是对代码的解释和说明，其目的是让人们能够更加轻松地了解代码。注释是编写程序时，写程序的人给一个语句、程序段、函数等的解释或提示，能提高程序代码的可读性。<br>注释只是为了提高可读性，不会被计算机编译。</p><p>注释有两种格式：<code>//注释内容</code>和<code>/*注释内容*/</code>。前者的生效范围是<code>//</code>及其之后的一整行内容，换行后即失效；后者的生效范围是<code>/*</code>与<code>*/</code>及其之间的内容，从以上程序可以看出后者是可以跨行使用的。</p><p><em>补充：因注释不会被编译，以下注释也是可正常使用的：<code>#inc/*注释内容*/lude &lt;stdio.h&gt;</code>。但注释的目的是提高代码的可读性，这么做显然与该目的相悖，所以正常情况下不会出现这种用法。</em></p><h4 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h4><p>即图中的<code>int main(){代码内容}</code>，其中：</p><p><code>int</code>称为数据类型(后续将会专门介绍)，标识着该函数的运行结果是什么类型的数据；</p><p><code>main</code>是函数名，即函数的名字，主函数的函数名固定为<code>main</code>，其他函数名称在符合规范的前提下可以任意选择；</p><p><code>()</code>内的内容成为形式参数列表，可留空，但主函数的形式参数列表留空的话会默认填充<code>String args[]</code>，至于该填充的意义是什么以后将做详细介绍；</p><p><code>{}</code>内包含代码后的整体成为代码块，紧跟在形式参数列表后成为函数体，即函数具体执行的功能描述；</p><p><code>printf("hello world");</code>与 <code> return 0;</code>称为语句，语句为C语言的基本构建块，一条语句相当于一条完整的计算机指令，每个语句以分号结尾。</p><p><em>补充：参考函数的概念可知,<code>printf("hello world")</code>就是一个函数</em></p><h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><p>规范并非规则，非强制要求，但按照规范书写代码可以提升代码的可读性，方便与人合作开发与后续维护，故代码规范非常需要重视。</p><p>1、善用回车保留空行，一个模块一段，模块与模块之间空行分隔；</p><p>2、变量、函数命名规范，避免无意义命名、拼音命名，建议驼峰命名或首字母大写命名；</p><p>3.1、善用tab键控制缩进而非用空格键控制；</p><p><em>3.2、倘若有跨平台开发的需求，则需注意要用空格控制缩进而非tab。不同平台对<code>\t</code>的不同定义可能会导致用tab键控制缩进的代码排版爆炸。</em></p><p>4、<strong>随手写注释</strong>。</p><p>……</p><h2 id="C语言中其他基本元素"><a href="#C语言中其他基本元素" class="headerlink" title="C语言中其他基本元素"></a>C语言中其他基本元素</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>由于变量让你能够把程序中准备使用的每一段数据都赋给一个简短、易于记忆的名字，因此它们十分有用。变量可以保存程序运行时用户输入的数据、特定运算的结果以及要在窗体上显示的一段数据等。简而言之，变量是用于跟踪几乎所有类型信息的简单工具。</p><p>变量正如数学公式里的x，ζ，λ等字符，用来书写时替代特定的数据，方便开发。</p><p>其定义方法为<code>数据类型 变量名;</code>，如<code>int x;</code>。<em>数据类型后面将作介绍</em></p><p>根据定义位置不同，C语言中存在全局变量（定义于函数外部）与局部变量（定义于某函数内部）。前者可在其定义的位置后的任意位置使用，后者仅能在他所在的函数体内、其定义位置后使用。</p><p>但需注意的是，并不是将所有变量都在最开头定义成全局变量就能解决一切问题。编程时应尽力避免全局变量的使用，原因在以后介绍C语言的内存分配机制时会解释。</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><p>整型<code>int</code>，浮点型<code>float</code>/<code>double</code>，布尔型<code>bool</code>，字符型<code>char</code>等</p><p><em>注：其中布尔型为C99及之后版本加入，且需引入头文件stdbool.h</em></p><h4 id="其他数据类型"><a href="#其他数据类型" class="headerlink" title="其他数据类型"></a>其他数据类型</h4><p>如字符串型<code>string</code>，结构体型<code>struct 结构体名称</code>，枚举型<code>enum</code>等</p><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><p><code>const</code>(不可修改)、<code>unsigned</code>(无符号，即非负)等</p><h4 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h4><p>保留字即C语言中本身具有意义的单词等，无法作为变量名、函数名等使用，如<code>int</code>就是一个保留字。</p><table><thead><tr><th align="left">类型</th><th align="left">存储大小</th><th align="left">值范围</th></tr></thead><tbody><tr><td align="left">char</td><td align="left">1 字节</td><td align="left">-128 到 127 或 0 到 255</td></tr><tr><td align="left">unsigned char</td><td align="left">1 字节</td><td align="left">0 到 255</td></tr><tr><td align="left">signed char</td><td align="left">1 字节</td><td align="left">-128 到 127</td></tr><tr><td align="left">int</td><td align="left">2 或 4 字节</td><td align="left">-32,768 到 32,767 (32位)或 -2,147,483,648 到 2,147,483,647 (64位)</td></tr><tr><td align="left">unsigned int</td><td align="left">2 或 4 字节</td><td align="left">0 到 65,535 (32位)或 0 到 4,294,967,295 (64位)</td></tr><tr><td align="left">short</td><td align="left">2 字节</td><td align="left">-32,768 到 32,767</td></tr><tr><td align="left">unsigned short</td><td align="left">2 字节</td><td align="left">0 到 65,535</td></tr><tr><td align="left">long</td><td align="left">4 字节</td><td align="left">-2,147,483,648 到 2,147,483,647</td></tr><tr><td align="left">unsigned long</td><td align="left">4 字节</td><td align="left">0 到 4,294,967,295</td></tr><tr><td align="left">float</td><td align="left">4 字节</td><td align="left">1.2E-38 到 3.4E+38</td></tr><tr><td align="left">double</td><td align="left">8 字节</td><td align="left">2.3E-308 到 1.7E+308</td></tr><tr><td align="left">long double</td><td align="left">16 字节</td><td align="left">3.4E-4932 到 1.1E+4932</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 琴理工作室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 教程 </tag>
            
            <tag> 琴理工作室 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信号与系统课设笔记</title>
      <link href="/xin-hao-yu-xi-tong-ke-cheng-she-ji-bi-ji/"/>
      <url>/xin-hao-yu-xi-tong-ke-cheng-she-ji-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="MatLab在线"><a href="#MatLab在线" class="headerlink" title="MatLab在线"></a>MatLab在线</h1><p><a href="https://matlab.mathworks.com/">MATLAB (mathworks.com)</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://max.book118.com/html/2019/0620/7132145033002034.shtm">利用MATLAB实现常用非周期时间信号的频谱和FT的性质(微分特性和卷积定理).doc (book118.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/165369211">希腊字母Typora格式 - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/guikunchen/article/details/88652407">LaTeX——使用Typora编写基于LaTeX的数学公式_guikunchen的博客-CSDN博客</a></p><h1 id="MatLab笔记"><a href="#MatLab笔记" class="headerlink" title="MatLab笔记"></a>MatLab笔记</h1><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h3 id="rectpuls"><a href="#rectpuls" class="headerlink" title="rectpuls"></a>rectpuls</h3><p>生成一个矩形脉冲。</p><p>官方文档：</p><pre class="line-numbers language-none"><code class="language-none">This MATLAB function returns a continuous, aperiodic, unity-height rectangular  pulse at the sample times indicated in array t, centered about t = 0 and with a   default width of 1.y = rectpuls(t)y = rectpuls(t,w)即：此MATLAB函数在数组 t 所指示的采样时间处返回一个连续的，非周期的，单位高度的矩形脉冲，该脉冲以t = 0为中心，默认宽度为1。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://blog.csdn.net/qq_42031142/article/details/106171814">Matlab中的rectpuls函数解析_wshwc的博客-CSDN博客</a>    </p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>生成指数函数。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">Y <span class="token operator">=</span> <span class="token function">exp</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p><code>Y = exp(X)</code> 为数组 <code>X</code> 中的每个元素返回指数 $$。对于复数元素 <code>z= x+ iy</code>，它返回以下复指数<br>$$<br>e^z=e^x(cos y+i sin y)<br>$$</p><h3 id="sinc"><a href="#sinc" class="headerlink" title="sinc"></a>sinc</h3><p>生成抽样信号。</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">Sat <span class="token operator">=</span> <span class="token function">sinc</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="fourier"><a href="#fourier" class="headerlink" title="fourier"></a>fourier</h3><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">fourier</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token function">fourier</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>transVar<span class="token punctuation">)</span><span class="token function">fourier</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>var<span class="token punctuation">,</span>transVar<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>f-输入，可以是表达式、函数、向量或矩阵等<br>var-变量，一般为时间变量或空间变量，如果不设置该变量，一般使用函数中的符号变量作为默认值</p><p>transVar-转换变量，可以是符号变量，表达式，向量或矩阵，该变量通常称为“频率变量”，默认情况下，傅立叶使用ω，如果ω是f的自变量，则傅立叶使用ν。<br>$$<br>F(\omega)=\int_{-\infty}^{+\infty}{f(x)e^{-i\omega x}dx}<br>$$</p><h3 id="plot"><a href="#plot" class="headerlink" title="plot"></a>plot</h3><p>绘制二维图像：</p><pre class="line-numbers language-none"><code class="language-none">plot函数的基本调用格式为：1、plot(y)当y为向量时，是以y的分量为纵坐标，以元素序号为横坐标，用直线依次连接数据点，绘制曲线。若y为实矩阵，则按列绘制每列对应的曲线。2、plot(x,y)若y和x为同维向量，则以x为横坐标,y为纵坐标绘制连线图。若x是向量，y是行数或列数与x长度相等的矩阵，则绘制多条不同色彩的连线图，x被作为这些曲线的共同横坐标。若x和y为同型矩阵，则以x,y对应元素分别绘制曲线，曲线条数等于矩阵列数。3、plot(x1,y1,x2,y2,……)在此格式中，每对x,y必须符合plot(x,y)中的要求，不同对之间没有影响，命令将对每一对x,y绘制曲线。以上三种格式中的x,y都可以是表达式。plot是绘制一维曲线的基本函数，但在使用此函数之前，须先定义曲线上每一点的x以及y坐标。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="axis"><a href="#axis" class="headerlink" title="axis"></a>axis</h3><p>控制坐标轴范围与样式</p><pre class="line-numbers language-none"><code class="language-none">axis([XMIN XMAX YMIN YMAX ZMIN ZMAX]) 设置当前所绘图像的x轴、y轴和z轴的范围。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="语法-功能"><a href="#语法-功能" class="headerlink" title="语法\功能"></a>语法\功能</h2><h3 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h3><p><a href="https://blog.csdn.net/qq_25018077/article/details/88998126">Matlab程序设计（六）—-创建函数（function）_曾经爱过她的回眸的博客-CSDN博客</a></p><h1 id="时域信号图像"><a href="#时域信号图像" class="headerlink" title="时域信号图像"></a>时域信号图像</h1><h2 id="门信号"><a href="#门信号" class="headerlink" title="门信号"></a>门信号</h2><p>门宽为2</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">t<span class="token operator">=</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">:</span><span class="token number">0.001</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">%横坐标[-4,4]，绘图每隔0.001取一点；本质为生成一个数组t[8000]</span>T<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">%门宽</span>ft <span class="token operator">=</span> <span class="token function">rectplus</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%函数值，记录每个横坐标为t除的函数值</span><span class="token function">plot</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>ft<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%绘图</span><span class="token function">axis</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%设定坐标轴范围</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="指数信号"><a href="#指数信号" class="headerlink" title="指数信号"></a>指数信号</h2><p>$$<br>f(t)=e^{at}<br>$$</p><p>例：<br>$$<br>f(t)=e^{2t}<br>$$</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">t<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0.001</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>ft <span class="token operator">=</span> <span class="token function">exp</span><span class="token punctuation">(</span>a<span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>ft<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="正弦信号（余弦信号同理）"><a href="#正弦信号（余弦信号同理）" class="headerlink" title="正弦信号（余弦信号同理）"></a>正弦信号（余弦信号同理）</h2><p>$$<br>f(t)=Asin(\omega t+\phi)<br>$$</p><p>例：<br>$$<br>f(t)=2sin(8\pi t+\frac{\pi}{6})<br>$$</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">A<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>w<span class="token operator">=</span><span class="token number">8</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">;</span>phi<span class="token operator">=</span><span class="token keyword">pi</span><span class="token operator">/</span><span class="token number">6</span>t<span class="token operator">=</span><span class="token operator">-</span><span class="token number">5</span><span class="token operator">:</span><span class="token number">0.001</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">;</span>ft<span class="token operator">=</span>A<span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>w<span class="token operator">*</span>t<span class="token operator">+</span>phi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>ft<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>看来MATLAB中<code>pi</code>即位常量<code>π</code></em></p><h2 id="抽样信号"><a href="#抽样信号" class="headerlink" title="抽样信号"></a>抽样信号</h2><p>$$<br>sinc(t)=Sa(t)=\frac{sin(\pi t)}{\pi t}<br>$$</p><p>例：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">t<span class="token operator">=</span><span class="token operator">-</span><span class="token number">5</span><span class="token operator">:</span><span class="token number">0.001</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">;</span>sat<span class="token operator">=</span><span class="token function">sinc</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>sat<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学校课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
            <tag> Fourier </tag>
            
            <tag> 信号与系统 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
